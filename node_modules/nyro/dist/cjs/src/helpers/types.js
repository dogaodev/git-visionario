"use strict";
/**
* @file /Users/berkanx/Desktop/Projects/requester/src/helpers/types.ts
* @description This file contains various TypeScript enums used for HTTP request and response handling.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.StatusCode = exports.ResponseType = exports.ContentType = exports.ResponseEncoding = exports.Method = void 0;
;
;
/**
 * @enum {string} Method
 * @description Enum representing HTTP methods.
 * @property {string} Get - HTTP GET method.
 * @property {string} Post - HTTP POST method.
 * @property {string} Put - HTTP PUT method.
 * @property {string} Patch - HTTP PATCH method.
 * @property {string} Delete - HTTP DELETE method.
 * @property {string} Head - HTTP HEAD method.
 * @property {string} Options - HTTP OPTIONS method.
 * @property {string} Connect - HTTP CONNECT method.
 * @property {string} Trace - HTTP TRACE method.
 */
var Method;
(function (Method) {
    Method["Get"] = "GET";
    Method["Post"] = "POST";
    Method["Put"] = "PUT";
    Method["Patch"] = "PATCH";
    Method["Delete"] = "DELETE";
    Method["Head"] = "HEAD";
    Method["Options"] = "OPTIONS";
    Method["Connect"] = "CONNECT";
    Method["Trace"] = "TRACE";
})(Method || (exports.Method = Method = {}));
;
/**
* @enum {string} ResponseEncoding
* @description Enum representing possible response encodings.
* @property {string} Utf8 - UTF-8 encoding.
* @property {string} Ascii - ASCII encoding.
* @property {string} Base64 - Base64 encoding.
* @property {string} Hex - Hexadecimal encoding.
* @property {string} Latin1 - Latin-1 encoding.
* @property {string} Binary - Binary encoding.
* @property {string} Utf16Le - UTF-16 Little Endian encoding.
* @property {string} Utf16Le2 - UTF-16 Little Endian encoding (alternative).
* @property {string} Ucs2 - UCS-2 encoding.
* @property {string} Ucs22 - UCS-2 encoding (alternative).
* @property {string} Base64Url - Base64 URL encoding.
*/
var ResponseEncoding;
(function (ResponseEncoding) {
    ResponseEncoding["Utf8"] = "utf8";
    ResponseEncoding["Ascii"] = "ascii";
    ResponseEncoding["Base64"] = "base64";
    ResponseEncoding["Hex"] = "hex";
    ResponseEncoding["Latin1"] = "latin1";
    ResponseEncoding["Binary"] = "binary";
    ResponseEncoding["Utf16Le"] = "utf16le";
    ResponseEncoding["Utf16Le2"] = "utf-16le";
    ResponseEncoding["Ucs2"] = "ucs2";
    ResponseEncoding["Ucs22"] = "ucs-2";
    ResponseEncoding["Base64Url"] = "base64url";
})(ResponseEncoding || (exports.ResponseEncoding = ResponseEncoding = {}));
;
/**
 * @enum {string} ContentType
 * @description Enum representing possible content types for HTTP requests.
 * @property {string} Json - application/json content type.
 * @property {string} Xml - application/xml content type.
 * @property {string} UrlEncoded - application/x-www-form-urlencoded content type.
 * @property {string} FormData - multipart/form-data content type.
 * @property {string} Text - text/plain content type.
 * @property {string} OctetStream - application/octet-stream content type.
 * @property {string} Default - Default content type (application/json).
 */
var ContentType;
(function (ContentType) {
    ContentType["Json"] = "application/json";
    ContentType["Xml"] = "application/xml";
    ContentType["UrlEncoded"] = "application/x-www-form-urlencoded";
    ContentType["FormData"] = "multipart/form-data";
    ContentType["Text"] = "text/plain";
    ContentType["OctetStream"] = "application/octet-stream";
    ContentType["Default"] = "application/json";
})(ContentType || (exports.ContentType = ContentType = {}));
;
/**
* @enum {string} ResponseType
* @description Enum representing possible response types.
* @property {string} Json - JSON response type.
* @property {string} Text - Text response type.
* @property {string} Blob - Blob response type.
* @property {string} Stream - Stream response type.
* @property {string} ArrayBuffer - ArrayBuffer response type.
* @property {string} Document - Document response type.
* @property {string} Default - Default response type (json).
*/
var ResponseType;
(function (ResponseType) {
    ResponseType["Json"] = "json";
    ResponseType["Text"] = "text";
    ResponseType["Blob"] = "blob";
    ResponseType["Stream"] = "stream";
    ResponseType["ArrayBuffer"] = "arrayBuffer";
    ResponseType["Document"] = "document";
    ResponseType["Default"] = "json";
})(ResponseType || (exports.ResponseType = ResponseType = {}));
;
/**
* @enum {number} StatusCode
* @description Enum representing HTTP status codes.
* @property {number} Continue - 100 Continue.
* @property {number} SwitchingProtocols - 101 Switching Protocols.
* @property {number} Processing - 102 Processing.
* @property {number} EarlyHints - 103 Early Hints.
* @property {number} Ok - 200 OK.
* @property {number} Created - 201 Created.
* @property {number} Accepted - 202 Accepted.
* @property {number} NonAuthoritativeInformation - 203 Non-Authoritative Information.
* @property {number} NoContent - 204 No Content.
* @property {number} ResetContent - 205 Reset Content.
* @property {number} PartialContent - 206 Partial Content.
* @property {number} MultiStatus - 207 Multi-Status.
* @property {number} AlreadyReported - 208 Already Reported.
* @property {number} ImUsed - 226 IM Used.
* @property {number} MultipleChoices - 300 Multiple Choices.
* @property {number} MovedPermanently - 301 Moved Permanently.
* @property {number} Found - 302 Found.
* @property {number} SeeOther - 303 See Other.
* @property {number} NotModified - 304 Not Modified.
* @property {number} UseProxy - 305 Use Proxy.
* @property {number} Unused - 306 Unused.
* @property {number} TemporaryRedirect - 307 Temporary Redirect.
* @property {number} PermanentRedirect - 308 Permanent Redirect.
* @property {number} BadRequest - 400 Bad Request.
* @property {number} Unauthorized - 401 Unauthorized.
* @property {number} PaymentRequired - 402 Payment Required.
* @property {number} Forbidden - 403 Forbidden.
* @property {number} NotFound - 404 Not Found.
* @property {number} MethodNotAllowed - 405 Method Not Allowed.
* @property {number} NotAcceptable - 406 Not Acceptable.
* @property {number} ProxyAuthenticationRequired - 407 Proxy Authentication Required.
* @property {number} RequestTimeout - 408 Request Timeout.
* @property {number} Conflict - 409 Conflict.
* @property {number} Gone - 410 Gone.
* @property {number} LengthRequired - 411 Length Required.
* @property {number} PreconditionFailed - 412 Precondition Failed.
* @property {number} PayloadTooLarge - 413 Payload Too Large.
* @property {number} UriTooLong - 414 URI Too Long.
* @property {number} UnsupportedMediaType - 415 Unsupported Media Type.
* @property {number} RangeNotSatisfiable - 416 Range Not Satisfiable.
* @property {number} ExpectationFailed - 417 Expectation Failed.
* @property {number} ImATeapot - 418 I'm a teapot.
* @property {number} MisdirectedRequest - 421 Misdirected Request.
* @property {number} UnprocessableEntity - 422 Unprocessable Entity.
* @property {number} Locked - 423 Locked.
* @property {number} FailedDependency - 424 Failed Dependency.
* @property {number} TooEarly - 425 Too Early.
* @property {number} UpgradeRequired - 426 Upgrade Required.
* @property {number} PreconditionRequired - 428 Precondition Required.
* @property {number} TooManyRequests - 429 Too Many Requests.
* @property {number} RequestHeaderFieldsTooLarge - 431 Request Header Fields Too Large.
* @property {number} UnavailableForLegalReasons - 451 Unavailable For Legal Reasons.
* @property {number} InternalServerError - 500 Internal Server Error.
* @property {number} NotImplemented - 501 Not Implemented.
* @property {number} BadGateway - 502 Bad Gateway.
* @property {number} ServiceUnavailable - 503 Service Unavailable.
* @property {number} GatewayTimeout - 504 Gateway Timeout.
* @property {number} HttpVersionNotSupported - 505 HTTP Version Not Supported.
* @property {number} VariantAlsoNegotiates - 506 Variant Also Negotiates.
* @property {number} InsufficientStorage - 507 Insufficient Storage.
* @property {number} LoopDetected - 508 Loop Detected.
* @property {number} NotExtended - 510 Not Extended.
* @property {number} NetworkAuthenticationRequired - 511 Network Authentication Required.
*/
var StatusCode;
(function (StatusCode) {
    StatusCode[StatusCode["Continue"] = 100] = "Continue";
    StatusCode[StatusCode["SwitchingProtocols"] = 101] = "SwitchingProtocols";
    StatusCode[StatusCode["Processing"] = 102] = "Processing";
    StatusCode[StatusCode["EarlyHints"] = 103] = "EarlyHints";
    StatusCode[StatusCode["Ok"] = 200] = "Ok";
    StatusCode[StatusCode["Created"] = 201] = "Created";
    StatusCode[StatusCode["Accepted"] = 202] = "Accepted";
    StatusCode[StatusCode["NonAuthoritativeInformation"] = 203] = "NonAuthoritativeInformation";
    StatusCode[StatusCode["NoContent"] = 204] = "NoContent";
    StatusCode[StatusCode["ResetContent"] = 205] = "ResetContent";
    StatusCode[StatusCode["PartialContent"] = 206] = "PartialContent";
    StatusCode[StatusCode["MultiStatus"] = 207] = "MultiStatus";
    StatusCode[StatusCode["AlreadyReported"] = 208] = "AlreadyReported";
    StatusCode[StatusCode["ImUsed"] = 226] = "ImUsed";
    StatusCode[StatusCode["MultipleChoices"] = 300] = "MultipleChoices";
    StatusCode[StatusCode["MovedPermanently"] = 301] = "MovedPermanently";
    StatusCode[StatusCode["Found"] = 302] = "Found";
    StatusCode[StatusCode["SeeOther"] = 303] = "SeeOther";
    StatusCode[StatusCode["NotModified"] = 304] = "NotModified";
    StatusCode[StatusCode["UseProxy"] = 305] = "UseProxy";
    StatusCode[StatusCode["Unused"] = 306] = "Unused";
    StatusCode[StatusCode["TemporaryRedirect"] = 307] = "TemporaryRedirect";
    StatusCode[StatusCode["PermanentRedirect"] = 308] = "PermanentRedirect";
    StatusCode[StatusCode["TooManyRedirects"] = 310] = "TooManyRedirects";
    StatusCode[StatusCode["BadRequest"] = 400] = "BadRequest";
    StatusCode[StatusCode["Unauthorized"] = 401] = "Unauthorized";
    StatusCode[StatusCode["PaymentRequired"] = 402] = "PaymentRequired";
    StatusCode[StatusCode["Forbidden"] = 403] = "Forbidden";
    StatusCode[StatusCode["NotFound"] = 404] = "NotFound";
    StatusCode[StatusCode["MethodNotAllowed"] = 405] = "MethodNotAllowed";
    StatusCode[StatusCode["NotAcceptable"] = 406] = "NotAcceptable";
    StatusCode[StatusCode["ProxyAuthenticationRequired"] = 407] = "ProxyAuthenticationRequired";
    StatusCode[StatusCode["RequestTimeout"] = 408] = "RequestTimeout";
    StatusCode[StatusCode["Conflict"] = 409] = "Conflict";
    StatusCode[StatusCode["Gone"] = 410] = "Gone";
    StatusCode[StatusCode["LengthRequired"] = 411] = "LengthRequired";
    StatusCode[StatusCode["PreconditionFailed"] = 412] = "PreconditionFailed";
    StatusCode[StatusCode["PayloadTooLarge"] = 413] = "PayloadTooLarge";
    StatusCode[StatusCode["UriTooLong"] = 414] = "UriTooLong";
    StatusCode[StatusCode["UnsupportedMediaType"] = 415] = "UnsupportedMediaType";
    StatusCode[StatusCode["RangeNotSatisfiable"] = 416] = "RangeNotSatisfiable";
    StatusCode[StatusCode["ExpectationFailed"] = 417] = "ExpectationFailed";
    StatusCode[StatusCode["ImATeapot"] = 418] = "ImATeapot";
    StatusCode[StatusCode["MisdirectedRequest"] = 421] = "MisdirectedRequest";
    StatusCode[StatusCode["UnprocessableEntity"] = 422] = "UnprocessableEntity";
    StatusCode[StatusCode["Locked"] = 423] = "Locked";
    StatusCode[StatusCode["FailedDependency"] = 424] = "FailedDependency";
    StatusCode[StatusCode["TooEarly"] = 425] = "TooEarly";
    StatusCode[StatusCode["UpgradeRequired"] = 426] = "UpgradeRequired";
    StatusCode[StatusCode["PreconditionRequired"] = 428] = "PreconditionRequired";
    StatusCode[StatusCode["TooManyRequests"] = 429] = "TooManyRequests";
    StatusCode[StatusCode["RequestHeaderFieldsTooLarge"] = 431] = "RequestHeaderFieldsTooLarge";
    StatusCode[StatusCode["UnavailableForLegalReasons"] = 451] = "UnavailableForLegalReasons";
    StatusCode[StatusCode["InternalServerError"] = 500] = "InternalServerError";
    StatusCode[StatusCode["NotImplemented"] = 501] = "NotImplemented";
    StatusCode[StatusCode["BadGateway"] = 502] = "BadGateway";
    StatusCode[StatusCode["ServiceUnavailable"] = 503] = "ServiceUnavailable";
    StatusCode[StatusCode["GatewayTimeout"] = 504] = "GatewayTimeout";
    StatusCode[StatusCode["HttpVersionNotSupported"] = 505] = "HttpVersionNotSupported";
    StatusCode[StatusCode["VariantAlsoNegotiates"] = 506] = "VariantAlsoNegotiates";
    StatusCode[StatusCode["InsufficientStorage"] = 507] = "InsufficientStorage";
    StatusCode[StatusCode["LoopDetected"] = 508] = "LoopDetected";
    StatusCode[StatusCode["NotExtended"] = 510] = "NotExtended";
    StatusCode[StatusCode["NetworkAuthenticationRequired"] = 511] = "NetworkAuthenticationRequired";
})(StatusCode || (exports.StatusCode = StatusCode = {}));
;
