"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var Headers = /** @class */ (function () {
    function Headers(headers) {
        this.headers = {};
        if (headers) {
            this.setFromObject(headers);
        }
    }
    Headers.prototype.toJSON = function () {
        return this.headers;
    };
    ;
    Headers.prototype.set = function (key, value) {
        if (!this.headers[key]) {
            this.headers[key] = value;
        }
        return this;
    };
    Headers.prototype.get = function (key) {
        return this.headers[key];
    };
    Headers.prototype.delete = function (key) {
        delete this.headers[key];
        return this;
    };
    Headers.prototype.all = function () {
        return this.headers;
    };
    Headers.prototype.clear = function () {
        this.headers = {};
        return this;
    };
    Headers.prototype.has = function (key) {
        return this.headers.hasOwnProperty(key);
    };
    Headers.prototype.setFromObject = function (headers) {
        this.headers = __assign(__assign({}, this.headers), headers);
        return this;
    };
    Headers.prototype.setFromHeaders = function (headers) {
        this.setFromObject(headers.all());
        return this;
    };
    Headers.prototype.setUserAgent = function (userAgent) {
        return this.set('User-Agent', userAgent);
    };
    Headers.prototype.setContentType = function (contentType) {
        return this.set('Content-Type', contentType);
    };
    Headers.prototype.setAccept = function (accept) {
        return this.set('Accept', accept);
    };
    Headers.prototype.setAuthorization = function (authorization) {
        return this.set('Authorization', authorization);
    };
    Headers.prototype.setBearerToken = function (token) {
        return this.setAuthorization("Bearer ".concat(token));
    };
    Headers.prototype.setBasicAuth = function (username, password) {
        return this.setAuthorization("Basic ".concat(Buffer.from("".concat(username, ":").concat(password)).toString('base64')));
    };
    Headers.prototype.setBearerAuth = function (token) {
        return this.setAuthorization("Bearer ".concat(token));
    };
    Headers.prototype.setReferer = function (referer) {
        return this.set('Referer', referer);
    };
    Headers.prototype.setOrigin = function (origin) {
        return this.set('Origin', origin);
    };
    Headers.prototype.setHost = function (host) {
        return this.set('Host', host);
    };
    Headers.prototype.setConnection = function (connection) {
        return this.set('Connection', connection);
    };
    Headers.prototype.setAcceptEncoding = function (acceptEncoding) {
        return this.set('Accept-Encoding', acceptEncoding);
    };
    Headers.prototype.setAcceptLanguage = function (acceptLanguage) {
        return this.set('Accept-Language', acceptLanguage);
    };
    Headers.prototype.setResponseType = function (responseType) {
        return this.set('Response-Type', responseType);
    };
    Headers.prototype.setCacheControl = function (cacheControl) {
        return this.set('Cache-Control', cacheControl);
    };
    Headers.prototype.setCookie = function (cookie) {
        return this.set('Cookie', cookie);
    };
    Headers.prototype.setDNT = function (dnt) {
        return this.set('DNT', dnt);
    };
    Headers.prototype.setPragma = function (pragma) {
        return this.set('Pragma', pragma);
    };
    return Headers;
}());
exports.default = Headers;
