"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var Options = /** @class */ (function () {
    function Options(options) {
        this.options = {};
    }
    Options.prototype.toJSON = function () {
        return this.options;
    };
    ;
    Options.prototype.set = function (key, value) {
        if (!this.options[key]) {
            this.options[key] = value;
        }
        return this;
    };
    Options.prototype.get = function (key) {
        return this.options[key];
    };
    Options.prototype.delete = function (key) {
        delete this.options[key];
        return this;
    };
    Options.prototype.all = function () {
        return this.options;
    };
    Options.prototype.clear = function () {
        this.options = {};
        return this;
    };
    Options.prototype.has = function (key) {
        return this.options.hasOwnProperty(key);
    };
    Options.prototype.setFromObject = function (options) {
        this.options = __assign(__assign({}, this.options), options);
        return this;
    };
    Options.prototype.setFromOptions = function (options) {
        this.setFromObject(options.all());
        return this;
    };
    Options.prototype.setURL = function (url) {
        return this.set('url', url);
    };
    Options.prototype.setBaseURL = function (baseURL) {
        return this.set('baseURL', baseURL);
    };
    Options.prototype.setPath = function (path) {
        return this.set('path', path);
    };
    Options.prototype.setBodySchema = function (bodySchema) {
        return this.set('bodySchema', bodySchema);
    };
    Options.prototype.setAuth = function (auth) {
        return this.set('auth', auth);
    };
    Options.prototype.setProxy = function (proxy) {
        return this.set('proxy', proxy);
    };
    Options.prototype.setMethod = function (method) {
        return this.set('method', method);
    };
    Options.prototype.setHeaders = function (headers) {
        if (typeof headers !== 'object')
            return this;
        return this.set('headers', headers);
    };
    Options.prototype.setBody = function (body) {
        return this.set('body', body);
    };
    Options.prototype.setQuery = function (query) {
        return this.set('query', query);
    };
    Options.prototype.setParams = function (params) {
        return this.set('params', params);
    };
    Options.prototype.setResponseEncoding = function (responseEncoding) {
        return this.set('responseEncoding', responseEncoding);
    };
    Options.prototype.setResponseType = function (responseType) {
        return this.set('responseType', responseType);
    };
    Options.prototype.setMaxRedirects = function (maxRedirects) {
        return this.set('maxRedirects', maxRedirects);
    };
    Options.prototype.setRetryDelay = function (retryDelay) {
        return this.set('retryDelay', retryDelay);
    };
    Options.prototype.setTimeout = function (timeout) {
        return this.set('timeout', timeout);
    };
    return Options;
}());
exports.default = Options;
